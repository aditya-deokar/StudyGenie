// AITeacher.tsx - (Previously Agent.tsx)

"use client";

import Image from "next/image";
import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";

import { cn } from "@/lib/utils";

import { vapi } from "@/interview/lib/vapi.sdk";
import { aiTeacher } from "@/interview/constants";


// Define more relevant props for a teaching context
interface AITeacherProps {
  studentName: string;
  studentId: string;
  courseId: string;
  chapterId: string;
  chapterTitle: string;
  chapterContent: string; // The text data of the chapter
  studentProgress: string; // A summary of the student's progress
  profileImage?: string;
}

enum CallStatus {
  INACTIVE = "INACTIVE",
  CONNECTING = "CONNECTING",
  ACTIVE = "ACTIVE",
  FINISHED = "FINISHED",
}

interface SavedMessage {
  role: "user" | "system" | "assistant";
  content: string;
}

const AITeacher = ({
  studentName,
  studentId,
  courseId,
  chapterId,
  chapterTitle,
  chapterContent,
  studentProgress,
  profileImage,
}: AITeacherProps) => {
  const router = useRouter();
  const [callStatus, setCallStatus] = useState<CallStatus>(CallStatus.INACTIVE);
  const [messages, setMessages] = useState<SavedMessage[]>([]);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [lastMessage, setLastMessage] = useState<string>("");

  useEffect(() => {
    // Vapi event listeners (no changes needed here, they are generic)
    const onCallStart = () => setCallStatus(CallStatus.ACTIVE);
    const onCallEnd = () => setCallStatus(CallStatus.FINISHED);
    const onMessage = (message: any) => { // Using 'any' for simplicity, you can use Vapi's Message type
      if (message.type === "transcript" && message.transcriptType === "final") {
        const newMessage = { role: message.role, content: message.transcript };
        setMessages((prev) => [...prev, newMessage]);
      }
    };
    const onSpeechStart = () => setIsSpeaking(true);
    const onSpeechEnd = () => setIsSpeaking(false);
    const onError = (error: Error) => console.error("Vapi Error:", error);

    vapi.on("call-start", onCallStart);
    vapi.on("call-end", onCallEnd);
    vapi.on("message", onMessage);
    vapi.on("speech-start", onSpeechStart);
    vapi.on("speech-end", onSpeechEnd);
    vapi.on("error", onError);

    return () => {
      vapi.off("call-start", onCallStart);
      vapi.off("call-end", onCallEnd);
      vapi.off("message", onMessage);
      vapi.off("speech-start", onSpeechStart);
      vapi.off("speech-end", onSpeechEnd);
      vapi.off("error", onError);
    };
  }, []);

  useEffect(() => {
    // Update the last message for display
    if (messages.length > 0) {
      setLastMessage(messages[messages.length - 1].content);
    }

    // This effect now handles updating student progress after a lesson
    const handleUpdateProgress = async (transcript: SavedMessage[]) => {
      console.log("Lesson finished. Updating student progress...");

      const { success } = await updateStudentProgress({
        studentId,
        courseId,
        chapterId,
        transcript,
        // You could also pass a summary generated by another LLM call here
      });

      if (success) {
        // Redirect to a dashboard or the next chapter
        router.push(`/dashboard/course/${courseId}`);
      } else {
        console.error("Error saving student progress");
        // Handle error appropriately
      }
    };

    if (callStatus === CallStatus.FINISHED && messages.length > 0) {
      handleUpdateProgress(messages);
    }
  }, [messages, callStatus, studentId, courseId, chapterId, router]);

  const startLesson = async () => {
    setCallStatus(CallStatus.CONNECTING);

    // This is the key change: we start the 'aiTeacher' assistant and
    // dynamically inject all the necessary context.
    await vapi.start(aiTeacher, {
      variableValues: {
        studentName: studentName,
        chapterTitle: chapterTitle,
        studentProgress: studentProgress,
        chapterContext: chapterContent,
      },
      // We can also dynamically set the first message based on context
      firstMessage: `Hello ${studentName}! I see you're ready to start learning about "${chapterTitle}". Shall we begin?`
    });
  };

  const endLesson = () => {
    setCallStatus(CallStatus.FINISHED);
    vapi.stop();
  };

  // --- UI Section (Updated for Teacher Persona) ---
  return (
    <>
      <div className="call-view">
        {/* AI Teacher Card */}
        <div className="card-interviewer">
          <div className="avatar">
            <Image
              src="/ai-teacher-avatar.png" // Use a teacher avatar
              alt="AI Teacher"
              width={65}
              height={54}
              className="object-cover"
            />
            {isSpeaking && <span className="animate-speak" />}
          </div>
          <h3 className="text-foreground">AI Teacher</h3>
        </div>

        {/* Student Profile Card */}
        <div className="card-border glass">
          <div className="card-content">
            <Image
              src={profileImage || "/default-student.png"}
              alt="student profile"
              width={120}
              height={120}
              className="rounded-full object-cover size-[120px]"
            />
            <h3 className="text-foreground">{studentName}</h3>
          </div>
        </div>
      </div>

      {/* Transcript Display (no changes needed) */}
      {messages.length > 0 && (
        <div className="transcript-border">
          <div className="transcript">
            <p
              key={lastMessage}
              className={cn("animate-fadeIn opacity-100")}
            >
              {lastMessage}
            </p>
          </div>
        </div>
      )}

      {/* Call Controls */}
      <div className="w-full flex justify-center mt-4">
        {callStatus !== "ACTIVE" ? (
          <button className="relative btn-call" onClick={startLesson}>
            <span
              className={cn(
                "absolute animate-ping rounded-full opacity-75",
                callStatus !== "CONNECTING" && "hidden"
              )}
            />
            <span className="relative">
              {callStatus === "INACTIVE" || callStatus === "FINISHED"
                ? "Start Lesson"
                : "Connecting..."}
            </span>
          </button>
        ) : (
          <button className="btn-disconnect" onClick={endLesson}>
            End Lesson
          </button>
        )}
      </div>
    </>
  );
};

export default AITeacher;